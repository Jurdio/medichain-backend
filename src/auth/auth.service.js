const crypto = require("crypto");
const nacl = require("tweetnacl");
const jwt = require("jsonwebtoken");
const bs58 = require("bs58").default;

const nonces = new Map(); // –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ –¥–ª—è nonce

exports.generateNonce = (publicKey) => {
    const nonce = crypto.randomBytes(16).toString("hex");
    nonces.set(publicKey, nonce);
    return nonce;
};

exports.verifySignature = (publicKey, signature) => {
    const nonce = nonces.get(publicKey);
    if (!nonce) return null; // Nonce –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ

    const message = new TextEncoder().encode(nonce);

    try {
        const signatureUint8 = new Uint8Array(Buffer.from(signature, "base64"));
        const publicKeyUint8 = bs58.decode(publicKey); // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ bs58

        if (publicKeyUint8.length !== 32) {
            console.error("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ä–æ–∑–º—ñ—Ä publicKey:", publicKeyUint8.length);
            return null;
        }

        const isVerified = nacl.sign.detached.verify(message, signatureUint8, publicKeyUint8);
        if (!isVerified) return null;

        // üî• –Ø–∫—â–æ –≤—Å–µ –¥–æ–±—Ä–µ ‚Äì —Å—Ç–≤–æ—Ä—é—î–º–æ JWT
        const token = jwt.sign({ publicKey }, process.env.JWT_SECRET, { expiresIn: "1h" });
        return token;
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—ñ–¥–ø–∏—Å—É:", error);
        return null;
    }
};
