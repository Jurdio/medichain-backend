---
description:
globs:
alwaysApply: false
---
# Project Overview: Medical Admin Panel (Backend)

**Призначення:** Цей бекенд слугує адміністративною панеллю для управління медичними даними та процесами.

**Основні Технології:** Розроблено з використанням **NestJS** (фреймворк Node.js) та **TypeScript** для побудови масштабованих та ефективних серверних застосунків.

**Ключові Залежності та Інтеграції:**
*   **NestJS Core Dependencies:** Основні компоненти NestJS для модульної архітектури.
*   **Multer:** Використовується для обробки `multipart/form-data`, зокрема для завантаження файлів.
*   **Class-validator & Class-transformer:** Застосовуються для валідації вхідних даних (DTOs) та автоматичного перетворення об'єктів.
*   **Privy:** Використовується для децентралізованої ідентифікації та автентифікації користувачів, забезпечуючи безпечний доступ до системи.
*   **Solana:** Інтегрований з блокчейном Solana для обробки транзакцій, управління цифровими активами або використання смарт-контрактів, пов'язаних з медичними процесами.
*   **Metaplex (потенційно):** Якщо проект передбачає управління NFT (наприклад, для представлення медичних записів, сертифікатів або інших унікальних цифрових активів), Metaplex буде використовуватися на блокчейні Solana.

**Загальна Структура:** Проект дотримується модульної архітектури NestJS, розділяючи функціональність на окремі модулі (наприклад, `AuthModule`, `PatientsModule`, `RecordsModule`, `ProtectModule`), кожен з яких містить контролери (для обробки HTTP-запитів), сервіси (для бізнес-логіки) та провайдери даних.

**Модулі, що Використовуються:**
*   `AppModule`: Кореневий модуль застосунку.
*   `ProtectModule`: Модуль, що відповідає за функціонал захисту (наприклад, видачу та перевірку сертифікатів).
*   `MulterModule`: Модуль NestJS для інтеграції Multer.
*   Інші потенційні модулі, як зазначено в огляді проекту: `AuthModule`, `PatientsModule`, `RecordsModule`.