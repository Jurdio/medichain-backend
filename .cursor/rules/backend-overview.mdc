---
alwaysApply: true
---
# Огляд проекту: Адміністративна панель для медичних даних (Backend)

## 1. Загальна інформація
1.1. **Призначення:** Цей бекенд слугує адміністративною панеллю для управління медичними даними та процесами.

## 2. Технологічний стек
2.1. **Основні технології:**
    - **NestJS:** Фреймворк Node.js, що використовується для побудови масштабованих та ефективних серверних застосунків.
    - **TypeScript:** Основна мова програмування, що забезпечує типізацію та надійність коду.

2.2. **Ключові залежності та інтеграції:**
    - **NestJS Core:** Основні компоненти для реалізації модульної архітектури.
    - **TypeORM & PostgreSQL:** Використовуються для взаємодії з реляційною базою даних, зберігання історії транзакцій та інших даних додатку.
    - **Multer:** Використористовується для обробки `multipart/form-data`, зокрема для завантаження файлів.
    - **Class-validator & Class-transformer:** Застосовуються для валідації вхідних даних (DTO) та автоматичного перетворення об'єктів.
    - **Privy:** Забезпечує децентралізовану ідентифікацію та автентифікацію користувачів для безпечного доступу до системи.
    - **Solana:** Інтегрований для обробки транзакцій, управління цифровими активами та використання смарт-контрактів.
    - **Metaplex:** Використовується для управління NFT на блокчейні Solana (наприклад, для медичних записів, сертифікатів).

## 3. Архітектура та структура проекту
3.1. **Загальна структура:** Проект дотримується модульної архітектури NestJS, розділяючи функціональність на окремі модулі, кожен з яких містить контролери, сервіси та провайдери даних.

3.2. **База даних:**
    - Система використовує **PostgreSQL** як основну базу даних.
    - Взаємодія з базою даних реалізована через **TypeORM**, що дозволяє працювати з БД за допомогою TypeScript entities.
    - Для локальної розробки рекомендується піднімати екземпляр PostgreSQL за допомогою **Docker**.

3.3. **Основні модулі:**
    - `AppModule`: Кореневий модуль застосунку, де налаштовується глобальна конфігурація, включаючи підключення до БД.
    - `ProtectModule`: Видача/керування сертифікатами; ендпоінт `POST /protect/create-certificate` (multipart/form-data). Деталі див. у правилах модуля Protect.
    - `HistoryModule`: Історія видачі сертифікатів; ендпоінт `GET /history/:doctorWalletAddress` з пагінацією та фільтрами дат.
    - `NftModule`: Інкапсулює логіку взаємодії з блокчейном Solana через Metaplex для створення NFT.
    - `MulterModule`: Модуль для інтеграції Multer.
    - **Потенційні модулі:** `AuthModule`, `PatientsModule`, `RecordsModule`.

3.4. **Структура та іменування файлів:**
    - **Контролери:** `src/*/.*controller.ts` (наприклад, `src/protect/protect.controller.ts`).
    - **Сервіси:** `src/*/.*service.ts` (наприклад, `src/protect/protect.service.ts`).
    - **DTO (Data Transfer Objects):** `src/*/dto/**/*.ts` (наприклад, `src/protect/dto/create-certificate.dto/create-certificate.dto.ts`).
    - **Модулі:** `src/*/.*module.ts` (наприклад, `src/protect/protect.module.ts`).
    - **Глобальні конфігурації:** `src/main.ts`.
    - **Типи:** `src/types/express.d.ts` (для `Express.Multer.File`).

## 4. Валідація, помилки та документація
4.1. **Обробка валідації та помилок:**
    - Глобальний `ValidationPipe` (`src/main.ts`) для автоматичної валідації DTO.
    - Декоратори `class-validator` та `class-transformer` у DTO для визначення правил валідації.
    - Автоматичні відповіді з помилками валідації для неправильних запитів.

4.2. **API документація:**
    - Генерується за допомогою `@nestjs/swagger`.
    - Доступна за шляхом `/api-docs`.
    - DTO використовують декоратори `@ApiProperty()` для детального опису схеми.

## 5. Середовище розробки
5.1. **Node.js:** `v20.10.0` (або актуальна версія з `package.json`).
5.2. **Менеджер пакетів:** `npm`.
5.3. **База даних:** Для локальної розробки використовується **PostgreSQL**, запущений через **Docker**.